// Code Golf Visualizer JavaScript

class CodeGolfVisualizer {
    constructor() {
        this.problems = {
            fizzbuzz: {
                id: 'fizzbuzz',
                title: 'FizzBuzz',
                description: 'Write a function that takes a number n and returns FizzBuzz output from 1 to n.',
                exampleTestCases: [
                    { input: 15, expected: '1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz' },
                    { input: 5, expected: '1, 2, Fizz, 4, Buzz' },
                    { input: 3, expected: '1, 2, Fizz' }
                ],
                performanceTestConfig: { 
                    input: 1000, 
                    description: 'Generate FizzBuzz for 1000 numbers',
                    expectedType: 'string',
                    expectedOutput: "1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16, 17, Fizz, 19, Buzz, Fizz, 22, 23, Fizz, Buzz, 26, Fizz, 28, 29, FizzBuzz, 31, 32, Fizz, 34, Buzz, Fizz, 37, 38, Fizz, Buzz, 41, Fizz, 43, 44, FizzBuzz, 46, 47, Fizz, 49, Buzz, Fizz, 52, 53, Fizz, Buzz, 56, Fizz, 58, 59, FizzBuzz, 61, 62, Fizz, 64, Buzz, Fizz, 67, 68, Fizz, Buzz, 71, Fizz, 73, 74, FizzBuzz, 76, 77, Fizz, 79, Buzz, Fizz, 82, 83, Fizz, Buzz, 86, Fizz, 88, 89, FizzBuzz, 91, 92, Fizz, 94, Buzz, Fizz, 97, 98, Fizz, Buzz, 101, Fizz, 103, 104, FizzBuzz, 106, 107, Fizz, 109, Buzz, Fizz, 112, 113, Fizz, Buzz, 116, Fizz, 118, 119, FizzBuzz, 121, 122, Fizz, 124, Buzz, Fizz, 127, 128, Fizz, Buzz, 131, Fizz, 133, 134, FizzBuzz, 136, 137, Fizz, 139, Buzz, Fizz, 142, 143, Fizz, Buzz, 146, Fizz, 148, 149, FizzBuzz, 151, 152, Fizz, 154, Buzz, Fizz, 157, 158, Fizz, Buzz, 161, Fizz, 163, 164, FizzBuzz, 166, 167, Fizz, 169, Buzz, Fizz, 172, 173, Fizz, Buzz, 176, Fizz, 178, 179, FizzBuzz, 181, 182, Fizz, 184, Buzz, Fizz, 187, 188, Fizz, Buzz, 191, Fizz, 193, 194, FizzBuzz, 196, 197, Fizz, 199, Buzz, Fizz, 202, 203, Fizz, Buzz, 206, Fizz, 208, 209, FizzBuzz, 211, 212, Fizz, 214, Buzz, Fizz, 217, 218, Fizz, Buzz, 221, Fizz, 223, 224, FizzBuzz, 226, 227, Fizz, 229, Buzz, Fizz, 232, 233, Fizz, Buzz, 236, Fizz, 238, 239, FizzBuzz, 241, 242, Fizz, 244, Buzz, Fizz, 247, 248, Fizz, Buzz, 251, Fizz, 253, 254, FizzBuzz, 256, 257, Fizz, 259, Buzz, Fizz, 262, 263, Fizz, Buzz, 266, Fizz, 268, 269, FizzBuzz, 271, 272, Fizz, 274, Buzz, Fizz, 277, 278, Fizz, Buzz, 281, Fizz, 283, 284, FizzBuzz, 286, 287, Fizz, 289, Buzz, Fizz, 292, 293, Fizz, Buzz, 296, Fizz, 298, 299, FizzBuzz, 301, 302, Fizz, 304, Buzz, Fizz, 307, 308, Fizz, Buzz, 311, Fizz, 313, 314, FizzBuzz, 316, 317, Fizz, 319, Buzz, Fizz, 322, 323, Fizz, Buzz, 326, Fizz, 328, 329, FizzBuzz, 331, 332, Fizz, 334, Buzz, Fizz, 337, 338, Fizz, Buzz, 341, Fizz, 343, 344, FizzBuzz, 346, 347, Fizz, 349, Buzz, Fizz, 352, 353, Fizz, Buzz, 356, Fizz, 358, 359, FizzBuzz, 361, 362, Fizz, 364, Buzz, Fizz, 367, 368, Fizz, Buzz, 371, Fizz, 373, 374, FizzBuzz, 376, 377, Fizz, 379, Buzz, Fizz, 382, 383, Fizz, Buzz, 386, Fizz, 388, 389, FizzBuzz, 391, 392, Fizz, 394, Buzz, Fizz, 397, 398, Fizz, Buzz, 401, Fizz, 403, 404, FizzBuzz, 406, 407, Fizz, 409, Buzz, Fizz, 412, 413, Fizz, Buzz, 416, Fizz, 418, 419, FizzBuzz, 421, 422, Fizz, 424, Buzz, Fizz, 427, 428, Fizz, Buzz, 431, Fizz, 433, 434, FizzBuzz, 436, 437, Fizz, 439, Buzz, Fizz, 442, 443, Fizz, Buzz, 446, Fizz, 448, 449, FizzBuzz, 451, 452, Fizz, 454, Buzz, Fizz, 457, 458, Fizz, Buzz, 461, Fizz, 463, 464, FizzBuzz, 466, 467, Fizz, 469, Buzz, Fizz, 472, 473, Fizz, Buzz, 476, Fizz, 478, 479, FizzBuzz, 481, 482, Fizz, 484, Buzz, Fizz, 487, 488, Fizz, Buzz, 491, Fizz, 493, 494, FizzBuzz, 496, 497, Fizz, 499, Buzz, Fizz, 502, 503, Fizz, Buzz, 506, Fizz, 508, 509, FizzBuzz, 511, 512, Fizz, 514, Buzz, Fizz, 517, 518, Fizz, Buzz, 521, Fizz, 523, 524, FizzBuzz, 526, 527, Fizz, 529, Buzz, Fizz, 532, 533, Fizz, Buzz, 536, Fizz, 538, 539, FizzBuzz, 541, 542, Fizz, 544, Buzz, Fizz, 547, 548, Fizz, Buzz, 551, Fizz, 553, 554, FizzBuzz, 556, 557, Fizz, 559, Buzz, Fizz, 562, 563, Fizz, Buzz, 566, Fizz, 568, 569, FizzBuzz, 571, 572, Fizz, 574, Buzz, Fizz, 577, 578, Fizz, Buzz, 581, Fizz, 583, 584, FizzBuzz, 586, 587, Fizz, 589, Buzz, Fizz, 592, 593, Fizz, Buzz, 596, Fizz, 598, 599, FizzBuzz, 601, 602, Fizz, 604, Buzz, Fizz, 607, 608, Fizz, Buzz, 611, Fizz, 613, 614, FizzBuzz, 616, 617, Fizz, 619, Buzz, Fizz, 622, 623, Fizz, Buzz, 626, Fizz, 628, 629, FizzBuzz, 631, 632, Fizz, 634, Buzz, Fizz, 637, 638, Fizz, Buzz, 641, Fizz, 643, 644, FizzBuzz, 646, 647, Fizz, 649, Buzz, Fizz, 652, 653, Fizz, Buzz, 656, Fizz, 658, 659, FizzBuzz, 661, 662, Fizz, 664, Buzz, Fizz, 667, 668, Fizz, Buzz, 671, Fizz, 673, 674, FizzBuzz, 676, 677, Fizz, 679, Buzz, Fizz, 682, 683, Fizz, Buzz, 686, Fizz, 688, 689, FizzBuzz, 691, 692, Fizz, 694, Buzz, Fizz, 697, 698, Fizz, Buzz, 701, Fizz, 703, 704, FizzBuzz, 706, 707, Fizz, 709, Buzz, Fizz, 712, 713, Fizz, Buzz, 716, Fizz, 718, 719, FizzBuzz, 721, 722, Fizz, 724, Buzz, Fizz, 727, 728, Fizz, Buzz, 731, Fizz, 733, 734, FizzBuzz, 736, 737, Fizz, 739, Buzz, Fizz, 742, 743, Fizz, Buzz, 746, Fizz, 748, 749, FizzBuzz, 751, 752, Fizz, 754, Buzz, Fizz, 757, 758, Fizz, Buzz, 761, Fizz, 763, 764, FizzBuzz, 766, 767, Fizz, 769, Buzz, Fizz, 772, 773, Fizz, Buzz, 776, Fizz, 778, 779, FizzBuzz, 781, 782, Fizz, 784, Buzz, Fizz, 787, 788, Fizz, Buzz, 791, Fizz, 793, 794, FizzBuzz, 796, 797, Fizz, 799, Buzz, Fizz, 802, 803, Fizz, Buzz, 806, Fizz, 808, 809, FizzBuzz, 811, 812, Fizz, 814, Buzz, Fizz, 817, 818, Fizz, Buzz, 821, Fizz, 823, 824, FizzBuzz, 826, 827, Fizz, 829, Buzz, Fizz, 832, 833, Fizz, Buzz, 836, Fizz, 838, 839, FizzBuzz, 841, 842, Fizz, 844, Buzz, Fizz, 847, 848, Fizz, Buzz, 851, Fizz, 853, 854, FizzBuzz, 856, 857, Fizz, 859, Buzz, Fizz, 862, 863, Fizz, Buzz, 866, Fizz, 868, 869, FizzBuzz, 871, 872, Fizz, 874, Buzz, Fizz, 877, 878, Fizz, Buzz, 881, Fizz, 883, 884, FizzBuzz, 886, 887, Fizz, 889, Buzz, Fizz, 892, 893, Fizz, Buzz, 896, Fizz, 898, 899, FizzBuzz, 901, 902, Fizz, 904, Buzz, Fizz, 907, 908, Fizz, Buzz, 911, Fizz, 913, 914, FizzBuzz, 916, 917, Fizz, 919, Buzz, Fizz, 922, 923, Fizz, Buzz, 926, Fizz, 928, 929, FizzBuzz, 931, 932, Fizz, 934, Buzz, Fizz, 937, 938, Fizz, Buzz, 941, Fizz, 943, 944, FizzBuzz, 946, 947, Fizz, 949, Buzz, Fizz, 952, 953, Fizz, Buzz, 956, Fizz, 958, 959, FizzBuzz, 961, 962, Fizz, 964, Buzz, Fizz, 967, 968, Fizz, Buzz, 971, Fizz, 973, 974, FizzBuzz, 976, 977, Fizz, 979, Buzz, Fizz, 982, 983, Fizz, Buzz, 986, Fizz, 988, 989, FizzBuzz, 991, 992, Fizz, 994, Buzz, Fizz, 997, 998, Fizz, Buzz",
                },
                difficulty: 'easy',
            },
            fibonacci: {
                id: 'fibonacci',
                title: 'Fibonacci Sequence',
                description: 'Write a function that returns the nth Fibonacci number (0-indexed).',
                exampleTestCases: [
                    { input: 5, expected: '5' },
                    { input: 8, expected: '21' },
                    { input: 12, expected: '144' },
                    { input: 0, expected: '0' }
                ],
                performanceTestConfig: { 
                    input: 100000,
                    description: 'Calculate the 10000th Fibonacci number',
                    expectedType: 'number',
                    expectedOutput: "",
                },
                difficulty: 'medium',
            },
            prime: {
                id: 'prime',
                title: 'Prime Numbers',
                description: 'Write a function that takes a number n and returns all prime numbers less than n.',
                exampleTestCases: [
                    { input: 30, expected: '2, 3, 5, 7, 11, 13, 17, 19, 23, 29' },
                    { input: 10, expected: '2, 3, 5, 7' },
                    { input: 20, expected: '2, 3, 5, 7, 11, 13, 17, 19' }
                ],
                performanceTestConfig: { 
                    input: 10000, 
                    description: 'Find all primes less than 10000',
                    expectedType: 'array',
                    expectedOutput: "2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973"
                },
                difficulty: 'medium',
            },
            palindrome: {
                id: 'palindrome',
                title: 'Palindrome Check',
                description: 'Write a function that checks if a string is a palindrome.',
                exampleTestCases: [
                    { input: 'racecar', expected: 'true' },
                    { input: 'hello', expected: 'false' },
                    { input: 'A man a plan a canal Panama', expected: 'true' },
                    { input: 'race a car', expected: 'false' }
                ],
                performanceTestConfig: { 
                    input: 'A'.repeat(10000) + 'B' + 'A'.repeat(10000), 
                    description: 'Check palindrome of 20001 character string',
                    expectedType: 'boolean',
                    expectedOutput: 'true'
                },
                difficulty: 'easy',
            },
            factorial: {
                id: 'factorial',
                title: 'Factorial',
                description: 'Write a function that calculates the factorial of a number.',
                exampleTestCases: [
                    { input: 5, expected: '120' },
                    { input: 0, expected: '1' },
                    { input: 7, expected: '5040' },
                    { input: 3, expected: '6' }
                ],
                performanceTestConfig: { 
                    input: 100, 
                    description: 'Calculate factorial of 100',
                    expectedType: 'number',
                    expectedOutput: '93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000'
                },
                difficulty: 'easy',
            },
            countVowels: {
                id: 'countVowels',
                title: 'Count Vowels',
                description: 'Write a function that counts the number of vowels in a string.',
                exampleTestCases: [
                    { input: 'Hello World', expected: '3' },
                    { input: 'JavaScript', expected: '3' },
                    { input: 'bcdfg', expected: '0' },
                    { input: 'aeiou', expected: '5' }
                ],
                performanceTestConfig: { 
                    input: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. '.repeat(1000), 
                    description: 'Count vowels in 55000 character string',
                    expectedType: 'number',
                    expectedOutput: '19000'
                },
                difficulty: 'easy',
            },
            reverseString: {
                id: 'reverseString',
                title: 'Reverse String',
                description: 'Write a function that reverses a string.',
                exampleTestCases: [
                    { input: 'JavaScript', expected: 'tpircSavaJ' },
                    { input: 'hello', expected: 'olleh' },
                    { input: 'world', expected: 'dlrow' },
                    { input: 'a', expected: 'a' }
                ],
                performanceTestConfig: { 
                    input: 'A'.repeat(50000) + 'B'.repeat(50000), 
                    description: 'Reverse string of 100000 characters',
                    expectedType: 'string',
                    expectedOutput: 'B'.repeat(50000) + 'A'.repeat(50000)
                },
                difficulty: 'easy',
            },
            sumArray: {
                id: 'sumArray',
                title: 'Sum Array',
                description: 'Write a function that calculates the sum of numbers in an array.',
                exampleTestCases: [
                    { input: [1, 2, 3, 4, 5], expected: '15' },
                    { input: [10, 20, 30], expected: '60' },
                    { input: [-1, 1, -2, 2], expected: '0' },
                    { input: [100], expected: '100' }
                ],
                performanceTestConfig: { 
                    input: Array.from({length: 100000}, (_, i) => i + 1), 
                    description: 'Sum array of 100000 numbers',
                    expectedType: 'number',
                    expectedOutput: '5000050000'
                },
                difficulty: 'easy',
            }
        };
        
        this.currentChallenge = this.problems.fizzbuzz;
        this.submissions = JSON.parse(localStorage.getItem('codeGolfSubmissions') || '[]');
        this.currentCode = '';
        this.currentLanguage = 'javascript';
        this.monacoEditor = null;
        this.performanceHistory = JSON.parse(localStorage.getItem('performanceHistory') || '[]');
        this.currentMetrics = {
            chars: 0,
            execTime: 0,
            efficiency: 0
        };
        this.hasRunCode = false; // Track if code has been executed
        
        this.initMonaco();
    }
    
    async initMonaco() {
        // Configure Monaco Editor - using global require.config since Monaco is loaded via CDN
        if (typeof window !== 'undefined' && window.require && window.require.config) {
            window.require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });
            
            window.require(['vs/editor/editor.main'], () => {
                this.setupMonacoEditor();
            });
        } else {
            // Fallback if require is not available
            console.warn('Monaco Editor require.js not available, falling back to textarea');
            this.setupFallbackEditor();
        }
    }
    
    setupMonacoEditor() {
        this.monacoEditor = monaco.editor.create(document.getElementById('monaco-editor'), {
            value: this.getSampleCode('javascript'),
            language: 'javascript',
            theme: 'vs-dark',
            minimap: { enabled: false },
            scrollBeyondLastLine: false,
            fontSize: 14,
            lineNumbers: 'on',
            roundedSelection: false,
            autoIndent: 'full',
            automaticLayout: true,
            wordWrap: 'on',
            tabSize: 2,
            insertSpaces: true
        });
        
        // Listen for content changes
        this.monacoEditor.onDidChangeModelContent(() => {
            this.currentCode = this.monacoEditor.getValue();
            this.updateCharacterCount();
        });
        
        // Initialize after Monaco is ready
        this.init();
    }
    
    setupFallbackEditor() {
        // Create a textarea fallback if Monaco Editor fails to load
        const editorContainer = document.getElementById('monaco-editor');
        editorContainer.innerHTML = '<textarea id="fallback-editor" style="width: 100%; height: 300px; font-family: monospace; background: #1e1e1e; color: #d4d4d4; border: none; padding: 10px;"></textarea>';
        const textarea = document.getElementById('fallback-editor');
        textarea.value = this.getSampleCode('javascript');
        
        textarea.addEventListener('input', () => {
            this.currentCode = textarea.value;
            this.updateCharacterCount();
        });
        
        // Initialize after fallback editor is ready
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.updateChallengeDisplay();
        this.updateCharacterCount();
        this.updateSubmissionCount();
        this.updatePerformanceMetrics();
        this.renderPerformanceCharts();
        this.currentCode = this.monacoEditor.getValue();
    }
    
    setupEventListeners() {
        // Problem selector
        const problemSelect = document.getElementById('problem-select');
        problemSelect.addEventListener('change', (e) => {
            this.switchProblem(e.target.value);
        });
        
        // Language selector
        const languageSelect = document.getElementById('language-select');
        languageSelect.addEventListener('change', (e) => {
            this.currentLanguage = e.target.value;
            this.loadSampleCode();
        });
        
        // Run code button
        const runButton = document.getElementById('run-code');
        runButton.addEventListener('click', () => this.runCode());
        
        // Submit code button
        const submitButton = document.getElementById('submit-code');
        submitButton.addEventListener('click', () => this.submitCode());
        
        // Clear storage button
        const clearStorageButton = document.getElementById('clear-storage');
        clearStorageButton.addEventListener('click', () => this.clearStorage());
        
        // Add sample data button
        const addSampleDataButton = document.getElementById('add-sample-data');
        addSampleDataButton.addEventListener('click', () => this.addSampleData());
    }
    
    resetUIState() {
        // Reset current metrics
        this.currentMetrics = {
            chars: 0,
            execTime: 0,
            efficiency: 0
        };
        this.hasRunCode = false; // Reset execution state
        
        // Reset character count display
        document.getElementById('current-chars').textContent = '0';
        
        // Reset execution time display
        document.getElementById('current-time').textContent = '-';
        
        // Reset efficiency score display
        document.getElementById('efficiency-score').textContent = '-';
        
        // Clear code output area
        const output = document.getElementById('code-output');
        output.innerHTML = '';
        output.style.borderLeft = '';
        
        // Reset test badges to pending state (will be re-initialized)
        this.initializeTestBadges();
    }

    switchProblem(problemId) {
        this.currentChallenge = this.problems[problemId];
        this.resetUIState(); // Reset all UI state first
        this.updateChallengeDisplay();
        this.loadSampleCode();
        this.renderPerformanceCharts();
    }
    
    updateChallengeDisplay() {
        document.getElementById('challenge-title').textContent = `Challenge: ${this.currentChallenge.title}`;
        document.getElementById('challenge-desc').textContent = this.currentChallenge.description;
        
        // Update expected output to show example test cases
        this.updateExpectedOutputDisplay();
        
        // Initialize test badges display immediately
        this.initializeTestBadges();
        
        // Update difficulty badge
        const difficultyBadge = document.querySelector('.difficulty-badge');
        difficultyBadge.className = `difficulty-badge ${this.currentChallenge.difficulty}`;
        difficultyBadge.textContent = this.currentChallenge.difficulty.charAt(0).toUpperCase() + this.currentChallenge.difficulty.slice(1);
        
        // Update submissions count for this problem
        const problemSubmissions = this.submissions.filter(s => s.challengeId === this.currentChallenge.id);
        document.getElementById('submission-count').textContent = problemSubmissions.length;
    }

    getSampleCode(language) {
        const sampleCode = {
            javascript: this.getJavaScriptSamples(),
        };
        
        return sampleCode[language][this.currentChallenge.id] || sampleCode.javascript[this.currentChallenge.id];
    }
    
    getJavaScriptSamples() {
        return {
            fizzbuzz: `// Write your FizzBuzz solution here
function solve(n) {
    let result = [];
    for (let i = 1; i <= n; i++) {
        if (i % 15 === 0) result.push("FizzBuzz");
        else if (i % 3 === 0) result.push("Fizz");
        else if (i % 5 === 0) result.push("Buzz");
        else result.push(i);
    }
    return result.join(", ");
}`,
            
            fibonacci: `// Write your Fibonacci solution here
function solve(n) {
    if (n <= 1) return n.toString();
    let a = 0, b = 1;
    for (let i = 2; i <= n; i++) {
        let temp = a + b;
        a = b;
        b = temp;
    }
    return b.toString();
}
// solve=n=>(a=0n,b=n<2?0n:1n,Array.from({length:n-1},()=>[a,b]=[b,a+b]),b.toString());
`,
            
            prime: `// Write your prime numbers solution here
function solve(n) {
    function isPrime(num) {
        if (num < 2) return false;
        for (let i = 2; i <= Math.sqrt(num); i++) {
            if (num % i === 0) return false;
        }
        return true;
    }
    
    let primes = [];
    for (let i = 2; i < n; i++) {
        if (isPrime(i)) primes.push(i);
    }
    return primes.join(", ");
}`,
            
            palindrome: `// Write your palindrome solution here
function solve(str) {
    const cleaned = str.toLowerCase().replace(/[^a-z]/g, '');
    return cleaned === cleaned.split('').reverse().join('');
}`,
            
            factorial: `// Write your factorial solution here
function solve(n) {
    if (n <= 1) return 1;
    return n * solve(n - 1);
}`,
            
            countVowels: `// Write your vowel counting solution here
function solve(str) {
    const vowels = 'aeiouAEIOU';
    let count = 0;
    for (let char of str) {
        if (vowels.includes(char)) count++;
    }
    return count;
}`,
            
            reverseString: `// Write your string reversal solution here
function solve(str) {
    return str.split('').reverse().join('');
}`,
            
            sumArray: `// Write your array sum solution here
function solve(arr) {
    return arr.reduce((sum, num) => sum + num, 0);
}`
        };
    }

    loadSampleCode() {
        if (this.monacoEditor) {
            const code = this.getSampleCode(this.currentLanguage);
            this.monacoEditor.setValue(code);
            
            // Update Monaco Editor language
            const model = this.monacoEditor.getModel();
            monaco.editor.setModelLanguage(model, this.currentLanguage);
            
            this.currentCode = code;
            this.updateCharacterCount();
        }
    }
    
    updateCharacterCount() {
        const charCount = this.currentCode.length;
        document.getElementById('char-count').textContent = charCount;
        
        // Update performance metrics
        this.currentMetrics.chars = charCount;
        document.getElementById('current-chars').textContent = charCount;
        this.updateEfficiencyScore();
    }
    
    updateSubmissionCount() {
        const count = this.submissions.length;
        document.getElementById('submission-count').textContent = count;
    }
    
    async runCode() {
        this.hasRunCode = true; // Mark that code execution has started
        const output = document.getElementById('code-output');
        const execTimeElement = document.getElementById('exec-time');
        
        // Get current code from Monaco Editor
        this.currentCode = this.monacoEditor.getValue();
        
        try {
            // Reset test badges to pending state
            this.resetTestBadges();
            
            // Run example test cases one by one
            const testResults = await this.runExampleTestsSequentially();
            
            // Run performance test
            const performanceResult = await this.runPerformanceTest();
            
            // Check if all example tests and performance test passed
            const allPassed = testResults.every(result => result.passed);
            const performancePassed = performanceResult.success;
            
            // Remove any existing performance error messages
            const existingErrorMessages = output.querySelectorAll('.performance-error');
            existingErrorMessages.forEach(msg => msg.remove());
            
            if (performancePassed) {
                // Update performance metrics only if performance test passed
                this.currentMetrics.execTime = performanceResult.execTime;
                document.getElementById('current-time').textContent = performanceResult.formattedTime;
                execTimeElement.textContent = performanceResult.formattedTime;
                this.updateEfficiencyScore();
                
                // Add to performance history
                this.addToPerformanceHistory(this.currentCode.length, performanceResult.execTime, allPassed);
            } else {
                // Performance test failed - show failure feedback
                document.getElementById('current-time').textContent = 'Failed';
                execTimeElement.textContent = 'Failed';
                this.currentMetrics.execTime = 0;
                this.updateEfficiencyScore();
                
                // Add visual feedback for performance failure
                output.style.borderLeft = '4px solid #ef4444';
                const errorMessage = document.createElement('div');
                errorMessage.className = 'performance-error';
                errorMessage.innerHTML = '<strong>⚠️ Performance Test Failed:</strong> Code produces incorrect output for large inputs';
                errorMessage.style.cssText = 'background: #fef2f2; color: #dc2626; padding: 0.75rem; margin-top: 1rem; border-radius: 6px; border: 1px solid #fecaca;';
                output.appendChild(errorMessage);
            }
            
            // Show overall result notification
            if (allPassed && performancePassed) {
                this.showNotification('✅ All tests passed!', 'success');
            } else if (allPassed && !performancePassed) {
                this.showNotification('⚠️ Example tests passed but performance test failed', 'warning');
            } else {
                this.showNotification('❌ Some test cases failed', 'error');
            }
            
        } catch (error) {
            output.innerHTML = `<div class="error-message">Error: ${error.message}</div>`;
            execTimeElement.textContent = '-';
            this.showNotification('❌ Code execution failed', 'error');
        }
    }
    
    initializeTestBadges() {
        const output = document.getElementById('code-output');
        const testCaseCount = this.currentChallenge.exampleTestCases.length;
        
        let outputHTML = '<div class="test-badges">';
        outputHTML += '<h4>Test Results:</h4>';
        outputHTML += '<div class="badge-container">';
        
        for (let i = 0; i < testCaseCount; i++) {
            outputHTML += `
                <div class="test-badge test-pending" id="test-badge-${i}">
                    <span class="badge-icon">⏳</span>
                    <span class="badge-label">Test Case ${i + 1}</span>
                </div>
            `;
        }
        
        outputHTML += '</div>';
        outputHTML += '</div>';
        
        output.innerHTML = outputHTML;
        output.style.borderLeft = '4px solid #6b7280';
    }

    resetTestBadges() {
        const testCaseCount = this.currentChallenge.exampleTestCases.length;
        
        for (let i = 0; i < testCaseCount; i++) {
            const badgeElement = document.getElementById(`test-badge-${i}`);
            if (badgeElement) {
                badgeElement.className = 'test-badge test-pending';
                badgeElement.querySelector('.badge-icon').textContent = '⏳';
            }
        }
        
        // Reset border color
        const output = document.getElementById('code-output');
        output.style.borderLeft = '4px solid #6b7280';
    }

    async runExampleTestsSequentially() {
        const testResults = [];
        
        for (let i = 0; i < this.currentChallenge.exampleTestCases.length; i++) {
            const testCase = this.currentChallenge.exampleTestCases[i];
            const badgeElement = document.getElementById(`test-badge-${i}`);
            
            // Update badge to running state
            badgeElement.className = 'test-badge test-running';
            badgeElement.querySelector('.badge-icon').textContent = '⚡';
            
            // Small delay to show running state
            await new Promise(resolve => setTimeout(resolve, 200));
            
            try {
                const result = await this.executeCodeWithInput(this.currentCode, testCase.input);
                const passed = result.trim() === testCase.expected;
                
                // Update badge to final state
                badgeElement.className = `test-badge ${passed ? 'test-passed' : 'test-failed'}`;
                badgeElement.querySelector('.badge-icon').textContent = passed ? '✅' : '❌';
                
                testResults.push({
                    testCase: i + 1,
                    input: testCase.input,
                    expected: testCase.expected,
                    actual: result.trim(),
                    passed: passed
                });
                
            } catch (error) {
                // Update badge to error state
                badgeElement.className = 'test-badge test-failed';
                badgeElement.querySelector('.badge-icon').textContent = '❌';
                
                testResults.push({
                    testCase: i + 1,
                    input: testCase.input,
                    expected: testCase.expected,
                    actual: `Error: ${error.message}`,
                    passed: false
                });
            }
            
            // Small delay between tests for visual feedback
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        // Update overall border color
        const allPassed = testResults.every(result => result.passed);
        const output = document.getElementById('code-output');
        output.style.borderLeft = allPassed ? '4px solid #10b981' : '4px solid #ef4444';
        
        return testResults;
    }
    
    async runPerformanceTest() {
        const config = this.currentChallenge.performanceTestConfig;
        
        const startTime = performance.now();
        try {
            const result = await this.executeCodeWithInput(this.currentCode, config.input);
            console.log(result)
            const endTime = performance.now();
            const success = result === config.expectedOutput;
            const execTime = endTime - startTime;
            
            // Format execution time with higher precision
            let formattedTime;
            if (execTime < 1) {
                formattedTime = (execTime * 1000).toFixed(2) + 'μs';
            } else if (execTime < 1000) {
                formattedTime = execTime.toFixed(3) + 'ms';
            } else {
                formattedTime = (execTime / 1000).toFixed(3) + 's';
            }
            
            return {
                execTime: execTime,
                formattedTime: formattedTime,
                result: result,
                success: success
            };
        } catch (error) {
            return {
                execTime: 0,
                formattedTime: '-',
                result: `Error: ${error.message}`,
                success: false
            };
        }
    }
    async executeCodeWithInput(code, input) {
        // Only support JavaScript for now
        if (this.currentLanguage !== 'javascript') {
            throw new Error('Only JavaScript is currently supported');
        }
        return this.executeJavaScriptWithInput(code, input);
    }
    
    executeJavaScriptWithInput(code, input) {
                    try {
            // Create a safe execution environment with the input
            const func = new Function('input', code + '\n; return solve(input);');
            const result = func(input);
            return String(result);
        } catch (error) {
            throw new Error(`JavaScript execution error: ${error.message}`);
                    }
                }
    async submitCode() {
        try {
            // Get current code from Monaco Editor
            this.currentCode = this.monacoEditor.getValue();
            
            // Run all example tests to validate correctness
            const testResults = await this.runExampleTests();
            const allTestsPassed = testResults.every(result => result.passed);
            
            if (!allTestsPassed) {
                this.showNotification('❌ Code doesn\'t pass all test cases', 'error');
                return;
            }
            
            // Run performance test for timing
            const performanceResult = await this.runPerformanceTest();
            
            if (!performanceResult.success) {
                this.showNotification('❌ Code failed performance test', 'error');
                return;
            }
            
            const submission = {
                id: Date.now(),
                code: this.currentCode,
                language: this.currentLanguage,
                characterCount: this.currentCode.length,
                executionTime: performanceResult.execTime,
                timestamp: new Date().toISOString(),
                author: this.generateRandomName(),
                challengeId: this.currentChallenge.id
            };
            
            this.submissions.push(submission);
            localStorage.setItem('codeGolfSubmissions', JSON.stringify(this.submissions));
            
            this.updateSubmissionCount();
            this.addToPerformanceHistory(this.currentCode.length, performanceResult.execTime, true);
            
            this.showNotification('🎉 Code submitted successfully!', 'success');
            
        } catch (error) {
            this.showNotification('❌ Submission failed: ' + error.message, 'error');
        }
    }
    
    generateRandomName() {
        const adjectives = ['Quick', 'Smart', 'Fast', 'Clever', 'Swift', 'Bright', 'Sharp', 'Keen'];
        const nouns = ['Coder', 'Developer', 'Programmer', 'Hacker', 'Geek', 'Ninja', 'Wizard', 'Master'];
        const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
        const noun = nouns[Math.floor(Math.random() * nouns.length)];
        const num = Math.floor(Math.random() * 100);
        return `${adj}${noun}${num}`;
    }
    
    updateEfficiencyScore() {
        if (this.currentMetrics.chars === 0) {
            this.currentMetrics.efficiency = 0;
            document.getElementById('efficiency-score').textContent = '-';
            return;
        }
        
        // If execution time is 0 and code has been run, it means performance test failed
        if (this.currentMetrics.execTime === 0 && this.hasRunCode) {
            this.currentMetrics.efficiency = 0;
            document.getElementById('efficiency-score').textContent = 'Failed';
            return;
        }
        
        // If no code has been run yet, show initial state
        if (!this.hasRunCode) {
            this.currentMetrics.efficiency = 0;
            document.getElementById('efficiency-score').textContent = '-';
            return;
        }
        
        // Calculate efficiency score (lower is better for code golf)
        // Use a more balanced formula that considers both factors proportionally
        
        // Character score: excellent if under 50 chars, good if under 100, poor if over 200
        const charScore = Math.max(0, 100 - Math.pow(this.currentMetrics.chars / 50, 1.5) * 40);
        
        // Time score: excellent if under 10ms, good if under 100ms, poor if over 1000ms
        const timeScore = Math.max(0, 100 - Math.pow(this.currentMetrics.execTime / 100, 1.2) * 60);
        
        // Weighted average: favor character count more for code golf (70% chars, 30% time)
        const efficiency = Math.round(charScore * 0.7 + timeScore * 0.3);
        
        this.currentMetrics.efficiency = Math.max(1, efficiency); // Minimum score of 1
        document.getElementById('efficiency-score').textContent = this.currentMetrics.efficiency;
    }
    
    addToPerformanceHistory(chars, execTime, isCorrect) {
        const entry = {
            timestamp: Date.now(),
            chars: chars,
            execTime: execTime,
            isCorrect: isCorrect
        };
        
        this.performanceHistory.push(entry);
        
        // Keep only last 20 entries
        if (this.performanceHistory.length > 20) {
            this.performanceHistory.shift();
        }
        
        localStorage.setItem('performanceHistory', JSON.stringify(this.performanceHistory));
        this.renderPerformanceCharts();
    }
    
    updatePerformanceMetrics() {
        this.updateCharacterCount();
        this.updateEfficiencyScore();
    }
    
    renderPerformanceCharts() {
        this.renderCharsTimeline();
        this.renderTimeTimeline();
        this.renderComplexityChart();
        this.renderOptimizationChart();
    }
    
    renderCharsTimeline() {
        const canvas = document.getElementById('chars-timeline');
        const ctx = canvas.getContext('2d');
        this.setupHighDPICanvas(canvas, ctx);

        if (this.performanceHistory.length === 0) {
            this.renderEmptyChart(ctx, canvas, 'Run your code to see character count trends');
            return;
        }

        const data = this.performanceHistory.map(entry => entry.chars);
        const min = Math.min(...data);
        const max = Math.max(...data);
        const color = '#667eea';
        const gradientStops = [
            { stop: 0, color: 'rgba(102, 126, 234, 0.8)' },
            { stop: 1, color: 'rgba(102, 126, 234, 0.2)' }
        ];

        this.renderLineChart({
            ctx,
            canvas,
            data,
            min,
            max,
            color,
            gradientStops,
            yLabel: 'Characters',
            valueLabelFn: this.drawValueLabels.bind(this)
        });
    }

    renderTimeTimeline() {
        const canvas = document.getElementById('time-timeline');
        const ctx = canvas.getContext('2d');
        this.setupHighDPICanvas(canvas, ctx);

        if (this.performanceHistory.length === 0) {
            this.renderEmptyChart(ctx, canvas, 'Run your code to see execution time trends');
            return;
        }

        const data = this.performanceHistory.map(entry => entry.execTime);
        const min = Math.min(...data);
        const max = Math.max(...data);
        const color = '#764ba2';
        const gradientStops = [
            { stop: 0, color: 'rgba(118, 75, 162, 0.8)' },
            { stop: 1, color: 'rgba(118, 75, 162, 0.2)' }
        ];

        this.renderLineChart({
            ctx,
            canvas,
            data,
            min,
            max,
            color,
            gradientStops,
            yLabel: 'Execution Time',
            valueLabelFn: this.drawTimeValueLabels.bind(this)
        });
    }

    renderLineChart({ ctx, canvas, data, min, max, color, gradientStops, yLabel, valueLabelFn }) {
        const padding = 50;
        const chartWidth = canvas.width - 2 * padding;
        const chartHeight = canvas.height - 2 * padding;

        // Draw grid
        this.drawGrid(ctx, canvas, padding, chartWidth, chartHeight);

        // Draw area under curve with gradient
        const gradient = ctx.createLinearGradient(0, padding, 0, canvas.height - padding);
        gradientStops.forEach(stopObj => gradient.addColorStop(stopObj.stop, stopObj.color));

        ctx.beginPath();
        ctx.moveTo(padding, canvas.height - padding);
        data.forEach((val, index) => {
            const x = padding + (index / (data.length - 1)) * chartWidth;
            const y = padding + chartHeight - ((val - min) / (max - min || 1)) * chartHeight;
            ctx.lineTo(x, y);
        });
        ctx.lineTo(padding + chartWidth, canvas.height - padding);
        ctx.closePath();
        ctx.fillStyle = gradient;
        ctx.fill();

        // Draw main line
        ctx.strokeStyle = color;
        ctx.lineWidth = 3;
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.beginPath();
        data.forEach((val, index) => {
            const x = padding + (index / (data.length - 1)) * chartWidth;
            const y = padding + chartHeight - ((val - min) / (max - min || 1)) * chartHeight;
            if (index === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        });
        ctx.stroke();

        // Draw enhanced points
        data.forEach((val, index) => {
            const x = padding + (index / (data.length - 1)) * chartWidth;
            const y = padding + chartHeight - ((val - min) / (max - min || 1)) * chartHeight;
            const entry = this.performanceHistory[index];
            const pointColor = entry.isCorrect ? '#10b981' : '#ef4444';

            // Outer circle (shadow)
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.beginPath();
            ctx.arc(x + 1, y + 1, 6, 0, 2 * Math.PI);
            ctx.fill();

            // Main circle
            ctx.fillStyle = pointColor;
            ctx.beginPath();
            ctx.arc(x, y, 5, 0, 2 * Math.PI);
            ctx.fill();

            // Inner highlight
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.beginPath();
            ctx.arc(x - 1, y - 1, 2, 0, 2 * Math.PI);
            ctx.fill();
        });

        // Draw labels
        this.drawAxisLabels(ctx, canvas, 'Time →', yLabel, padding);

        // Draw value labels
        valueLabelFn(ctx, min, max, padding, chartHeight);
    }
    
    renderComplexityChart() {
        const canvas = document.getElementById('complexity-chart');
        const ctx = canvas.getContext('2d');
        
        // Set up high DPI rendering
        this.setupHighDPICanvas(canvas, ctx);
        
        if (!this.currentCode) {
            this.renderEmptyChart(ctx, canvas, 'Write code to see complexity analysis');
            return;
        }
        
        // Analyze code complexity
        const analysis = this.analyzeCodeComplexity(this.currentCode);
        
        // Draw enhanced bar chart
        const categories = ['Loops', 'Conditionals', 'Functions', 'Variables'];
        const values = [analysis.loops, analysis.conditionals, analysis.functions, analysis.variables];
        const maxValue = Math.max(...values, 1);
        const colors = ['#667eea', '#10b981', '#f59e0b', '#ef4444'];
        
        const padding = 50;
        const barSpacing = 20;
        const availableWidth = canvas.width - 2 * padding;
        const barWidth = (availableWidth - (categories.length - 1) * barSpacing) / categories.length;
        const barMaxHeight = canvas.height - 100;
        
        // Draw grid lines
        ctx.strokeStyle = '#f1f5f9';
        ctx.lineWidth = 1;
        for (let i = 0; i <= 5; i++) {
            const y = padding + (i / 5) * barMaxHeight;
            ctx.beginPath();
            ctx.moveTo(padding, y);
            ctx.lineTo(canvas.width - padding, y);
            ctx.stroke();
        }
        
        categories.forEach((category, index) => {
            const value = values[index];
            const barHeight = (value / maxValue) * barMaxHeight;
            const x = padding + index * (barWidth + barSpacing);
            const y = canvas.height - 50 - barHeight;
            
            // Draw bar shadow
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(x + 2, y + 2, barWidth, barHeight);
            
            // Draw gradient bar
            const gradient = ctx.createLinearGradient(0, y, 0, y + barHeight);
            gradient.addColorStop(0, colors[index]);
            gradient.addColorStop(1, colors[index] + '80');
            ctx.fillStyle = gradient;
            ctx.fillRect(x, y, barWidth, barHeight);
            
            // Draw bar border
            ctx.strokeStyle = colors[index];
            ctx.lineWidth = 2;
            ctx.strokeRect(x, y, barWidth, barHeight);
            
            // Draw value on top of bar
            if (value > 0) {
                ctx.fillStyle = '#1a202c';
                ctx.font = 'bold 16px Inter';
                ctx.textAlign = 'center';
                ctx.fillText(value.toString(), x + barWidth / 2, y - 10);
            }
            
            // Draw category label
            ctx.fillStyle = '#4a5568';
            ctx.font = '14px Inter';
            ctx.textAlign = 'center';
            const labelY = canvas.height - 25;
            ctx.fillText(category, x + barWidth / 2, labelY);
        });
        
        // Draw y-axis labels
        ctx.fillStyle = '#6b7280';
        ctx.font = '12px Inter';
        ctx.textAlign = 'right';
        for (let i = 0; i <= maxValue; i++) {
            const y = canvas.height - 50 - (i / maxValue) * barMaxHeight;
            ctx.fillText(i.toString(), padding - 10, y + 4);
        }
    }
    
    renderOptimizationChart() {
        const canvas = document.getElementById('optimization-chart');
        const ctx = canvas.getContext('2d');
        
        // Set up high DPI rendering
        this.setupHighDPICanvas(canvas, ctx);
        
        if (!this.currentCode) {
            this.renderEmptyChart(ctx, canvas, 'Write code to see optimization suggestions');
            return;
        }
        
        // Analyze optimization opportunities
        const suggestions = this.getOptimizationSuggestions(this.currentCode);
        
        // Draw enhanced optimization score gauge
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2 - 20;
        const radius = Math.min(centerX, centerY) - 30;
        
        // Draw background circle
        ctx.strokeStyle = '#f1f5f9';
        ctx.lineWidth = 20;
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.stroke();
        
        // Draw score arc with gradient
        const score = suggestions.score;
        const scoreAngle = (score / 100) * 2 * Math.PI;
        const gradient = ctx.createConicGradient(0, centerX, centerY);
        gradient.addColorStop(0, '#ef4444');
        gradient.addColorStop(0.5, '#f59e0b');
        gradient.addColorStop(1, '#10b981');
        
        ctx.strokeStyle = score > 70 ? '#10b981' : score > 40 ? '#f59e0b' : '#ef4444';
        ctx.lineWidth = 20;
        ctx.lineCap = 'round';
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, -Math.PI / 2, -Math.PI / 2 + scoreAngle);
        ctx.stroke();
        
        // Draw inner shadow circle
        ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius - 25, 0, 2 * Math.PI);
        ctx.stroke();
        
        // Draw score text with shadow
        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
        ctx.font = 'bold 48px Inter';
        ctx.textAlign = 'center';
        ctx.fillText(score.toString(), centerX + 2, centerY + 2);
        
        ctx.fillStyle = '#1a202c';
        ctx.font = 'bold 48px Inter';
        ctx.textAlign = 'center';
        ctx.fillText(score.toString(), centerX, centerY);
        
        // Draw label split into two lines with smaller text
        ctx.fillStyle = '#6b7280';
        ctx.font = '12px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('Optimization', centerX, centerY + 25);
        ctx.fillText('Score', centerX, centerY + 40);
        
        // Draw suggestions with better formatting
        const maxSuggestions = 4;
        const displaySuggestions = suggestions.tips.slice(0, maxSuggestions);
        const startY = centerY + radius + 40;
        
        ctx.fillStyle = '#374151';
        ctx.font = '14px Inter';
        ctx.textAlign = 'left';
        
        displaySuggestions.forEach((tip, index) => {
            const y = startY + index * 22;
            
            // Draw bullet point
            ctx.fillStyle = score > 70 ? '#10b981' : score > 40 ? '#f59e0b' : '#ef4444';
            ctx.beginPath();
            ctx.arc(30, y - 5, 3, 0, 2 * Math.PI);
            ctx.fill();
            
            // Draw suggestion text
            ctx.fillStyle = '#374151';
            ctx.fillText(tip, 45, y);
        });
    }
    
    analyzeCodeComplexity(code) {
        const loops = (code.match(/for\s*\(|while\s*\(|\.forEach|\.map|\.filter|\.reduce/g) || []).length;
        const conditionals = (code.match(/if\s*\(|else|switch|\?|&&|\|\|/g) || []).length;
        const functions = (code.match(/function\s+\w+|=>\s*{|=>\s*\w/g) || []).length;
        const variables = (code.match(/let\s+\w+|const\s+\w+|var\s+\w+/g) || []).length;
        
        return { loops, conditionals, functions, variables };
    }
    
    getOptimizationSuggestions(code) {
        let score = 100;
        const tips = [];
        
        // Check for common optimization opportunities
        if (code.length > 200) {
            score -= 10;
            tips.push('Consider using shorter variable names');
        }
        
        if (code.includes('console.log')) {
            score -= 5;
            tips.push('Remove console.log statements');
        }
        
        if (code.includes('function ')) {
            score -= 5;
            tips.push('Use arrow functions (=>) to save characters');
        }
        
        if (code.includes('let ') || code.includes('const ')) {
            score -= 5;
            tips.push('Consider using shorter variable declarations');
        }
        
        if (code.includes('return ')) {
            score -= 3;
            tips.push('Eliminate unnecessary return statements');
        }
        
        if (code.includes('  ')) {
            score -= 5;
            tips.push('Remove extra whitespace');
        }
        
        if (tips.length === 0) {
            tips.push('Great job! Your code looks optimized.');
        }
        
        return { score: Math.max(0, score), tips };
    }
    
    clearStorage() {
        if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
            localStorage.removeItem('codeGolfSubmissions');
            localStorage.removeItem('performanceHistory');
            this.submissions = [];
            this.performanceHistory = [];
            this.updateSubmissionCount();
            this.renderPerformanceCharts();
            this.showNotification('🗑️ All data cleared successfully', 'info');
        }
    }
    
    addSampleData() {
        const sampleHistory = [
            { timestamp: Date.now() - 60000, chars: 150, execTime: 0.45, isCorrect: false },
            { timestamp: Date.now() - 50000, chars: 120, execTime: 0.32, isCorrect: false },
            { timestamp: Date.now() - 40000, chars: 98, execTime: 0.28, isCorrect: true },
            { timestamp: Date.now() - 30000, chars: 87, execTime: 0.25, isCorrect: true },
            { timestamp: Date.now() - 20000, chars: 74, execTime: 0.23, isCorrect: true }
        ];
        
        this.performanceHistory.push(...sampleHistory);
        localStorage.setItem('performanceHistory', JSON.stringify(this.performanceHistory));
        this.renderPerformanceCharts();
        this.showNotification('➕ Sample performance data added', 'success');
    }
    
    showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Style the notification
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '12px 20px',
            borderRadius: '8px',
            color: 'white',
            fontWeight: '500',
            zIndex: '1000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease',
            maxWidth: '300px',
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'
        });
        
        // Set background color based on type
        const colors = {
            success: '#10b981',
            error: '#ef4444',
            info: '#3b82f6',
            warning: '#f59e0b'
        };
        notification.style.backgroundColor = colors[type] || colors.info;
        
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Remove after 3 seconds
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    updateExpectedOutputDisplay() {
        const outputElement = document.getElementById('expected-output');
        outputElement.innerHTML = '';
        // Create a formatted display of example test cases
        let outputHTML = '';
        this.currentChallenge.exampleTestCases.forEach((testCase, index) => {
            const inputDisplay = Array.isArray(testCase.input) 
                ? `[${testCase.input.join(', ')}]` 
                : typeof testCase.input === 'string' 
                    ? `"${testCase.input}"` 
                    : testCase.input;
            
            outputHTML += `
                <div class="test-case">
                    <div class="test-case-header">Test Case ${index + 1}:</div>
                    <div class="test-case-input">Input: ${inputDisplay}</div>
                    <div class="test-case-expected">Expected: ${testCase.expected}</div>
                </div>
            `;
        });
        
        outputHTML += '';
        
        outputElement.innerHTML = outputHTML;
    }
    
    // Helper methods for enhanced chart rendering
    setupHighDPICanvas(canvas, ctx) {
        const dpr = window.devicePixelRatio || 1;
        
        // Force recalculation of dimensions by temporarily clearing styles
        const originalWidth = canvas.style.width;
        const originalHeight = canvas.style.height;
        canvas.style.width = '';
        canvas.style.height = '';
        
        const rect = canvas.getBoundingClientRect();
        
        // Set the CSS size explicitly
        canvas.style.width = rect.width + 'px';
        canvas.style.height = rect.height + 'px';
        
        // Set actual size in memory (scaled to account for extra pixel density)
        canvas.width = rect.width * dpr;
        canvas.height = rect.height * dpr;
        
        // Scale the drawing context so everything draws at the correct size
        ctx.scale(dpr, dpr);
        
        // Clear the canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Enable crisp rendering
        ctx.imageSmoothingEnabled = false;
    };
    
    renderEmptyChart(ctx, canvas, message) {
        ctx.fillStyle = '#9ca3af';
        ctx.font = '16px Inter';
        ctx.textAlign = 'center';
        ctx.fillText(message, canvas.width / (2 * (window.devicePixelRatio || 1)), 
                     canvas.height / (2 * (window.devicePixelRatio || 1)));
    }
    
    drawGrid(ctx, canvas, padding, chartWidth, chartHeight) {
        const dpr = window.devicePixelRatio || 1;
        const adjustedPadding = padding / dpr;
        const adjustedChartWidth = chartWidth / dpr;
        const adjustedChartHeight = chartHeight / dpr;
        
        ctx.strokeStyle = '#f1f5f9';
        ctx.lineWidth = 1;
        
        // Horizontal grid lines
        for (let i = 0; i <= 5; i++) {
            const y = adjustedPadding + (i / 5) * adjustedChartHeight;
            ctx.beginPath();
            ctx.moveTo(adjustedPadding, y);
            ctx.lineTo(adjustedPadding + adjustedChartWidth, y);
            ctx.stroke();
        }
        
        // Vertical grid lines
        for (let i = 0; i <= 5; i++) {
            const x = adjustedPadding + (i / 5) * adjustedChartWidth;
            ctx.beginPath();
            ctx.moveTo(x, adjustedPadding);
            ctx.lineTo(x, adjustedPadding + adjustedChartHeight);
            ctx.stroke();
        }
        
        // Draw main axes
        ctx.strokeStyle = '#d1d5db';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(adjustedPadding, adjustedPadding);
        ctx.lineTo(adjustedPadding, adjustedPadding + adjustedChartHeight);
        ctx.lineTo(adjustedPadding + adjustedChartWidth, adjustedPadding + adjustedChartHeight);
        ctx.stroke();
    }
    
    drawAxisLabels(ctx, canvas, xLabel, yLabel, padding) {
        const dpr = window.devicePixelRatio || 1;
        const adjustedPadding = padding / dpr;
        const adjustedWidth = canvas.width / dpr;
        const adjustedHeight = canvas.height / dpr;
        
        ctx.fillStyle = '#4a5568';
        ctx.font = '14px Inter';
        ctx.textAlign = 'center';
        ctx.fillText(xLabel, adjustedWidth / 2, adjustedHeight - 10);
        
        ctx.save();
        ctx.translate(15, adjustedHeight / 2);
        ctx.rotate(-Math.PI / 2);
        ctx.fillText(yLabel, 0, 0);
        ctx.restore();
    }
    
    drawValueLabels(ctx, minValue, maxValue, padding, chartHeight) {
        const dpr = window.devicePixelRatio || 1;
        const adjustedPadding = padding / dpr;
        const adjustedChartHeight = chartHeight / dpr;
        
        ctx.fillStyle = '#6b7280';
        ctx.font = '12px Inter';
        ctx.textAlign = 'right';
        
        const steps = 5;
        for (let i = 0; i <= steps; i++) {
            const value = minValue + (maxValue - minValue) * (i / steps);
            const y = adjustedPadding + adjustedChartHeight - (i / steps) * adjustedChartHeight;
            ctx.fillText(Math.round(value).toString(), adjustedPadding - 10, y + 4);
        }
    }
    
    drawTimeValueLabels(ctx, minTime, maxTime, padding, chartHeight) {
        const dpr = window.devicePixelRatio || 1;
        const adjustedPadding = padding / dpr;
        const adjustedChartHeight = chartHeight / dpr;
        
        ctx.fillStyle = '#6b7280';
        ctx.font = '12px Inter';
        ctx.textAlign = 'right';
        
        const steps = 5;
        for (let i = 0; i <= steps; i++) {
            const time = minTime + (maxTime - minTime) * (i / steps);
            const y = adjustedPadding + adjustedChartHeight - (i / steps) * adjustedChartHeight;
            
            let formattedTime;
            if (time < 1) {
                formattedTime = (time * 1000).toFixed(0) + 'μs';
            } else if (time < 1000) {
                formattedTime = time.toFixed(1) + 'ms';
            } else {
                formattedTime = (time / 1000).toFixed(1) + 's';
            }
            
            ctx.fillText(formattedTime, adjustedPadding - 10, y + 4);
        }
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize the Code Golf Visualizer
    const codeGolf = new CodeGolfVisualizer();
    
    // Handle window resize to redraw charts
    let resizeTimeout;
    window.addEventListener('resize', function() {
        // Debounce resize events to avoid excessive redraws
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            codeGolf.renderPerformanceCharts();
        }, 250);
    });
    
});